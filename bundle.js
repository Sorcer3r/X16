(()=>{"use strict";var t={n:i=>{var e=i&&i.__esModule?()=>i.default:()=>i;return t.d(e,{a:e}),e},d:(i,e)=>{for(var s in e)t.o(e,s)&&!t.o(i,s)&&Object.defineProperty(i,s,{enumerable:!0,get:e[s]})},o:(t,i)=>Object.prototype.hasOwnProperty.call(t,i)};const i=jQuery;var e=t.n(i);const s={add_class:function(t,i){var e;this.is_canvas(t)?t.classList.add(i):null===(e=document.querySelector(t))||void 0===e||e.classList.add(i)},append:function(t,i){document.querySelector(t).innerHTML=i},append_element:function(t,i){var e;null===(e=document.querySelector(t))||void 0===e||e.appendChild(i)},attr:function(t,i,e){var s;null===(s=document.querySelector(t))||void 0===s||s.setAttribute(i,e)},css:function(t,i,e){document.querySelector(t).style[i]=e},disabled(t,i){document.querySelectorAll(t).forEach((t=>{t.disabled=i}))},empty(t){document.querySelector(t).innerHTML=""},fade_in(t,i=0,e=1e3){const s=document.querySelector(t);setTimeout((function(){s.style.opacity=0,s.style.transition="opacity "+e/1e3+"s",s.style.opacity=1}),i)},fade_out(t,i=0,e=1e3){const s=document.querySelector(t);setTimeout((function(){s.style.opacity=1,s.style.transition="opacity "+e/1e3+"s",s.style.opacity=0}),i)},fade(t,i,e,s=200){document.querySelectorAll(t).forEach((t=>{t.style.opacity!=e&&setTimeout((function(){t.style.opacity=i,t.style.transition="opacity "+s/1e3+"s",t.style.opacity=e}))}))},get_css:function(t,i){return document.querySelector(t).style[i]},hide(t){document.querySelector(t).style.display="none"},html(t,i){document.querySelector(t).innerHTML=i},is_canvas:t=>t instanceof HTMLCanvasElement,remove_all_class:function(t,i){document.querySelectorAll(t).forEach((t=>{t.classList.remove(i)}))},remove_all_elements:function(t){document.querySelectorAll(t).forEach((t=>{t.remove()}))},remove_class:function(t,i){var e;null===(e=document.querySelector(t))||void 0===e||e.classList.remove(i)},show(t){document.querySelector(t).style.display="block"},sel:t=>document.querySelector(t),val:(t,i)=>(i&&(document.querySelector(t).value=i),document.querySelector(t).value)};function o(t,i="normal"){let e=2e3;"tip"==i&&(e=1e4),s.html("#statustext",t),s.fade_out("#statustext",e,2e3)}function n(){document.fullscreenElement||document.mozFullScreenElement||document.webkitFullscreenElement||document.msFullscreenElement?document.exitFullscreen?document.exitFullscreen():document.msExitFullscreen?document.msExitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.webkitExitFullscreen&&document.webkitExitFullscreen():document.documentElement.requestFullscreen?document.documentElement.requestFullscreen():document.documentElement.msRequestFullscreen?document.documentElement.msRequestFullscreen():document.documentElement.mozRequestFullScreen?document.documentElement.mozRequestFullScreen():document.documentElement.webkitRequestFullscreen&&document.documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT)}class l{get_width(){return this.width}get_height(){return this.height}is_min_zoom(){return this.zoom<this.zoom_min}is_max_zoom(){return this.zoom>this.zoom_max}get_zoom(){return this.zoom}zoom_in(){this.zoom<=this.zoom_max&&(this.zoom+=2,this.update_zoom())}zoom_out(){this.zoom>=this.zoom_min&&(this.zoom-=2,this.update_zoom())}update_zoom(){this.width=this.pixels_x*this.zoom,this.height=this.pixels_y*this.zoom}}class r extends l{constructor(t,i){super(),this.window=t,this.config=i,this.sorted_array=[],this.config=i,this.window=t,this.zoom=this.config.window_list.zoom,this.zoom_min=4,this.zoom_max=16,this.pixels_x=this.config.sprite_x,this.pixels_y=this.config.sprite_y,this.width=this.pixels_x*this.zoom,this.height=this.pixels_y*this.zoom,this.clicked_sprite=0,this.sorted_array=[],this.grid=!0,s.append("#window-"+this.window,'\n      <div class="window_menu">\n      <div class="icons-zoom-area">\n          <img src="img/ui/icon-zoom-plus.png" class="icon-hover" id="icon-list-zoom-in" title="zoom in">\n          <img src="img/ui/icon-zoom-minus.png" class="icon-hover" id="icon-list-zoom-out" title="zoom out">\n          <img src="img/ui/icon-grid.png" class="icon-hover" id="icon-list-grid" title="toggle sprite borders">\n      </div>\n        <img src="img/ui/icon-list-new.png" class="icon-hover" id="icon-list-new" title="new sprite (shift + n)">\n        <img src="img/ui/icon-list-copy.png" class="icon-hover" id="icon-list-copy" title="copy sprite (shift + c)">\n        <img src="img/ui/icon-list-paste.png" class="icon-hover" id="icon-list-paste" title="paste sprite (shift + v)">\n        <img src="img/ui/icon-list-duplicate.png" class="icon-hover" id="icon-list-duplicate" title="duplicate sprite (shift + d)">\n        <img src="img/ui/icon-list-trash.png" class="icon-right icon-hover" id="icon-list-delete" title="delete sprite (shift + x)">\n      </div>\n      <div id="spritelist"></div>\n    '),e()("#spritelist").sortable({cursor:"move",tolerance:"pointer",revert:"100"}),document.head.insertAdjacentHTML("beforeend",`<style id="zoom-sort-fix" type='text/css'>.list-sprite-size{ width: ${this.width}px; height:${this.height}px;} </style>`)}get_clicked_sprite(){return this.clicked_sprite}toggle_grid(){this.grid=!this.grid}update_zoom(){this.width=this.pixels_x*this.zoom,this.height=this.pixels_y*this.zoom;const t=document.getElementById("zoom-sort-fix");t.parentNode.removeChild(t),document.head.insertAdjacentHTML("beforeend",`<style id="zoom-sort-fix" type='text/css'>.list-sprite-size{ width: ${this.width}px; height:${this.height}px;} </style>`)}update(t){e()("#window-"+this.window).dialog("option","title",`sprite ${t.current_sprite+1} of ${t.sprites.length}`);const i=document.getElementById(t.current_sprite).getContext("2d",{alpha:!1}),s=t.sprites[t.current_sprite];this.draw_sprite(i,s,t)}update_all(t){s.remove_all_elements(".sprite_in_list");const i=t.sprites.length;for(let e=0;e<i;e++){const i=document.createElement("canvas");i.id=e,i.width=this.width,i.height=this.height,s.append_element("#spritelist",i),s.add_class(i,"sprite_in_list"),i.setAttribute("title",t.sprites[e].name),s.add_class(i,"list-sprite-size"),this.grid&&s.add_class(i,"sprite_in_list_border"),i.addEventListener("click",(()=>this.clicked_sprite=e));const o=i.getContext("2d",{alpha:!1}),n=t.sprites[e];this.draw_sprite(o,n,t)}}draw_sprite(t,i,e){t.fillStyle=this.config.colors[e.colors[0]],t.fillRect(0,0,this.width,this.height);for(let s=0;s<this.pixels_x;s+=1)for(let o=0;o<this.pixels_y;o++){const n=i.pixels[o][s];if(0!=n){let i=e.colors[n];t.fillStyle=this.config.colors[i],t.fillRect(s*this.zoom,o*this.zoom,1*this.zoom,this.zoom)}}}resize_editor(t,i){this.pixels_x=t,this.pixels_y=i,this.width=this.pixels_x*this.zoom,this.height=this.pixels_y*this.zoom,this.update_zoom()}}class a{constructor(t,i,o){this.window=t,this.config=i,this.eventhandler=o,this.config=i,this.window=t,this.eventhandler=o;const n=`\n    <div id="info">\n        <img autofocus src="img/logo-menu.svg" width="300px" id="logo" alt="spritemateX">\n        <p>The <s>Commodore 64</s> Commander X16 sprite editor,\n        v${this.config.version.toFixed(2)}</p>\n\n        <fieldset>\n            <h1>Release notes</h1>\n            <h2>This is a clone of the source code for SpriteMate for the Commodore 64 (<a href="https://spritemate.com">spritemate.com</a>)</h2>\n\n            <h1>V0.32</h1>\n            <p>\n            - Fixed Drawing Issue<br/>\n            - Added XCI Export<br/>\n            - Fixed Duplication Sprite naming bug</br>\n            </p>\n\n            <h1>V0.3</h1>\n            <p>\n            - Commented out remaining C64 specific code.<br/>\n            - Added X16 stye pallet notation #FFF (#RedGreenBlue) single digits<br/>\n            - Added Project Information to status bar<br/>\n            </p>\n\n            <h1>V0.2</h1>\n            <p>\n            - Added Commander X16 16 Colour Palettes.<br/>\n            - Added size specification on New<br/>\n            - Added Colour Depth on New<br/>\n            - Removed Multi Colour Toggles<br/>\n            - Invert function only for colour depths 2 and 4<br/>\n            - Removed Double Height and Double Width<br/>\n            </p>\n\n            <h1>V0.1</h1>\n            <p>\n            - Added the ability to individually assign pixels a colour from the palette.<br/>\n            - Added specifying the asset size when using "New".<br/>\n            - Added export to Kick and ACME with the new format.<br/>\n            - created a new file standard called *.spmx.<br/>\n            </p>\n\n        </fieldset>\n\n        <button id="button-info">Let's go!</button>\n    </div>\n    `;s.append("#window-"+this.window,n),e()("#window-"+this.window).dialog({show:"fade",hide:"fade"}),s.sel("#button-info").onclick=()=>{e()("#window-"+this.window).dialog("close"),this.eventhandler.onLoad()}}}class c{constructor(t,i){this.window=t,this.config=i,this.config=i,this.window=t,s.append("#window-"+this.window,'\n    <div id="menu">\n      <div class ="iconset icon-hover" id="icon-load">\n            <img src="img/ui/icon-load.png" class="icon" title="load">\n            <div class="icontext">load</div>\n        </div>\n        <div class ="iconset icon-hover" id="icon-save">\n            <img src="img/ui/icon-save.png" class="icon" title="save">\n            <div class="icontext">save</div>\n        </div>\n        <div class ="iconset icon-hover" id="icon-undo">\n            <img src="img/ui/icon-undo.png" class="icon" title="undo">\n            <div class="icontext">undo</div>\n        </div>\n        <div class ="iconset icon-hover" id="icon-redo">\n            <img src="img/ui/icon-redo.png" class="icon" title="redo">\n            <div class="icontext">redo</div>\n        </div>\n        <div class ="iconset icon-hover" id="icon-move">\n            <img src="img/ui/icon-move.png" class="icon" id="image-icon-move" title="move tool (m)">\n            <div class="icontext">move</div>\n        </div>\n        <div class ="iconset icon-hover" id="icon-draw">\n            <img src="img/ui/icon-draw-hi.png" class="icon" id="image-icon-draw" title="draw tool (d)">\n            <div class="icontext">draw</div>\n        </div>\n        <div class ="iconset icon-hover" id="icon-erase">\n            <img src="img/ui/icon-erase.png" class="icon" id="image-icon-erase" title="erase tool (e)">\n            <div class="icontext">erase</div>\n        </div>\n        <div class ="iconset icon-hover" id="icon-fill">\n            <img src="img/ui/icon-fill.png" class="icon"  id="image-icon-fill" title="fill tool (f)">  \n            <div class="icontext">fill</div>\n        </div>\n      </div>\n    ')}}class h{constructor(t,i){this.config=t,this.eventhandler=i,this.config=t,this.eventhandler=i,this.setup_load_input()}setup_load_input(){const t=document.createElement("div");t.innerHTML='<input type="file" id="input-load" style="display: none">';const i=t.firstChild;document.body.appendChild(i);const e=this;i.addEventListener("change",(function(){e.read_file_data(i)}))}read_file_data(t){const i=t.files[0];if(i.name.match(/\.(spmx|spd|spr)$/)){const t=new FileReader;t.onload=()=>{var e;i.name.match(/\.(spmx)$/)&&this.parse_file_spm(t.result),i.name.match(/\.(spd|spr)$/)&&this.parse_file_spd(t.result),this.eventhandler.onLoad(),null===(e=document.querySelector("#input-load"))||void 0===e||e.remove(),this.setup_load_input()},i.name.match(/\.(spmx)$/)&&t.readAsText(i),i.name.match(/\.(spd|spr)$/)&&t.readAsBinaryString(i),s.html("#menubar-filename-name",i.name)}else alert("File not supported, .spmx or .spd files only")}get_imported_file(){return this.imported_file}parse_file_spm(t){t=(t=(t=(t=(t=(t=(t=(t=t.replace(/"t":/g,'"0":')).replace(/"i":/g,'"1":')).replace(/"m1":/g,'"2":')).replace(/"m2":/g,'"3":')).replace(/"t"/g,"0")).replace(/"i"/g,"1")).replace(/"m1"/g,"2")).replace(/"m2"/g,"3"),this.imported_file=JSON.parse(t),this.imported_file=this.convert_legacy_formats(this.imported_file)}parse_file_spd(t){this.file=t,this.start_of_sprite_data=0,this.old_format=!0,"S"==this.file[0]&&"P"==this.file[1]&&"D"==this.file[2]&&(this.start_of_sprite_data=6,this.old_format=!1),this.sprite_size=64,this.create_sprite_data_object();for(let t=0;t<this.number_of_sprites;t++)this.convert_sprite_data_to_internal_format(t)}create_sprite_data_object(){this.color_trans=this.file.charCodeAt(this.start_of_sprite_data+0),this.color_multi1=this.file.charCodeAt(this.start_of_sprite_data+1),this.color_multi2=this.file.charCodeAt(this.start_of_sprite_data+2),this.old_format?this.number_of_sprites=(this.file.length-3)/64:this.number_of_sprites=parseInt(this.file.charCodeAt(4),10)+1,1==this.number_of_sprites?o(this.number_of_sprites+" sprite imported successfully."):o(this.number_of_sprites+" sprites imported successfully."),this.imported_file={},this.imported_file.colors={0:this.color_trans,2:this.color_multi1,3:this.color_multi2},this.imported_file.sprites=[],this.imported_file.current_sprite=0,this.imported_file.pen=1}convert_sprite_data_to_internal_format(t){const i=this.start_of_sprite_data+2+(t+1)*this.sprite_size,e=("00000000"+this.file.charCodeAt(i).toString(2)).slice(-8);this.overlay=!1,1==parseInt(e[3])&&(this.overlay=!0),this.pencolor=parseInt(this.file.charCodeAt(i).toString(2).slice(-4),2);const s={name:"sprite_"+t,color:this.pencolor,double_x:!1,double_y:!1,overlay:this.overlay,pixels:[]},o=[],n=this.start_of_sprite_data+3+t*this.sprite_size,l=(t+1)*this.sprite_size+this.start_of_sprite_data+3;for(let t=n;t<l;t++){const i=("0000000"+this.file.charCodeAt(t).toString(2)).slice(-8).match(/.{1,2}/g);for(let t=0;t<i.length;t++){let e=0;e=1,"0"==i[t][0]&&(e=0),o.push(e),e=1,"0"==i[t][1]&&(e=0),o.push(e)}}let r=[],a=0;for(let t=0;t<o.length;t++)r.push(o[t]),a++,24==a&&(s.pixels.push(r),a=0,r=[]);this.imported_file.sprites.push(s)}convert_legacy_formats(t){if(!t.sprites[0].name){const i=t.sprites.length;for(let e=0;e<i;e++)t.sprites[e].name="sprite_"+e}return t.version||(t.version=this.config.version),t.version=this.config.version,t}}class d{constructor(t,i,o){this.window=t,this.config=i,this.eventhandler=o,this.config=i,this.window=t,this.default_filename="mysprites",this.eventhandler=o;const n=`\n    <div id="window-save">\n\n      <div class="center">\n        Filename: <input autofocus type="text" id="filename" name="filename" value="${this.default_filename}">\n        <p>The file will be saved to your browser's default download location.</p>\n      </div>\n      <br/>\n      <fieldset>\n        <legend>SpritemateX // *.spmx</legend>\n        <button id="button-save-spm">Save as SpritemateX</button>\n        <p>JSON file format for spritemateX. Recommended as long as you are not done working on the sprites.</p>\n      </fieldset>\n    \n      <fieldset>\n        <legend>Assembly code // *.txt</legend>\n        <div class="fieldset right">\n          <button id="button-save-source-kick">KICK ASS</button>\n          <button id="button-save-source-acme">ACME</button>\n          <button id="button-save-source-xci">XCI</button>\n        </div>\n        <p>A text file containing the sprite data in assembly language. KICK ASS, ACME and XCI are compilers with slightly different syntax.</p>\n      </fieldset>\n\n      <fieldset>\n        <legend>BASIC // *.bas</legend>\n        <button id="button-save-basic">Save as BASIC 2.0</button>\n        <p>A BASIC 2.0 text file that you can copy & paste into VICE.</p>\n      </fieldset>\n\n      <fieldset>\n        <legend>PNG image</legend>\n        <p>To save a sprite as a PNG image, "right click" on the sprite in the PREVIEW window. Your browser will display a "save image as..." option in the context menu. The size of the PNG can be set with the zoom levels of the PREVIEW window.</p>\n      </fieldset>\n\n      <div id="button-row">\n        <button id="button-save-cancel" class="button-cancel">Cancel</button>\n      </div>\n    </div> \n    `;s.append("#window-"+this.window,n),e()("#window-"+this.window).dialog({show:"fade",hide:"fade"}),s.sel("#button-save-cancel").onclick=()=>this.close_window(),s.sel("#button-save-spm").onclick=()=>this.save_spm(),s.sel("#button-save-source-kick").onclick=()=>this.save_assembly("kick"),s.sel("#button-save-source-acme").onclick=()=>this.save_assembly("acme"),s.sel("#button-save-source-xci").onclick=()=>this.save_assembly("xci"),s.sel("#button-save-basic").onclick=()=>this.save_basic(),s.sel("#filename").onkeyup=()=>{this.default_filename=s.val("#filename"),this.default_filename.length<1?(s.add_class("#filename","error"),s.disabled("#button-save-spm",!0),s.add_class("#button-save-spm","error"),s.disabled("#button-save-source-kick",!0),s.add_class("#button-save-source-kick","error"),s.disabled("#button-save-source-acme",!0),s.add_class("#button-save-source-acme","error"),s.disabled("#button-save-basic",!0),s.add_class("#button-save-basic","error")):(s.remove_class("#filename","error"),s.disabled("#button-save-spm",!1),s.remove_class("#button-save-spm","error"),s.disabled("#button-save-source-kick",!1),s.remove_class("#button-save-source-kick","error"),s.disabled("#button-save-source-acme",!1),s.remove_class("#button-save-source-acme","error"),s.disabled("#button-save-basic",!1),s.remove_class("#button-save-basic","error"))}}save_file_to_disk(t,i){if(window.navigator.msSaveOrOpenBlob)window.navigator.msSaveOrOpenBlob(t,i);else{const e=document.createElement("a"),s=URL.createObjectURL(t);e.href=s,e.download=i,document.body.appendChild(e),e.click(),setTimeout((function(){document.body.removeChild(e),window.URL.revokeObjectURL(s)}),0)}o("File has been saved."),s.html("#menubar-filename-name",i)}save_spm(){const t=this.default_filename+".spmx";let i=JSON.stringify(this.savedata);i=i.replace(/],/g,"],\n").replace(/\[\[/g,"[\n[").replace(/]]/g,"]\n]");const e=new Blob([i],{type:"text/plain"});this.save_file_to_disk(e,t),this.close_window()}save_assembly(t){const i=this.default_filename+".txt",e=this.create_assembly(t),s=new Blob([e],{type:"text/plain"});this.save_file_to_disk(s,i),this.close_window()}save_basic(){const t=this.default_filename+".bas",i=this.create_basic(),e=new Blob([i],{type:"text/plain"});this.save_file_to_disk(e,t),this.close_window()}create_assembly(t){let i="; ",e="!",s="",o="$",n=",",l="byte";"kick"==t?(i="// ",e=".",s=":"):"xci"==t&&(e="",s="",o="",n="",l="");let r="";r+="\n"+i+this.savedata.sprites.length+" sprites generated with spritemateX on "+(new Date).toLocaleString();let a=0;for(let c=0;c<this.savedata.sprites.length;c++){const h=[].concat.apply([],this.savedata.sprites[c].pixels);let d=1;const p=this.config.sprite_x;r+="\n\n"+i+"sprite "+c,r+=", Width : "+this.config.sprite_x+", Height : "+this.config.sprite_y,r+=", Colour Depth : "+this.config.colour_depth+"\n",r+="\n"+this.savedata.sprites[c].name+s+"\n",d=16==this.config.colour_depth?2:4==this.config.colour_depth?4:8;for(let i=0;i<h.length;i+=d){if(i%p==0&&("xci"!=t&&(r=r.substring(0,r.length-1)),r+="\n"+e+l+" "),8==d){a=0;for(let t=0;t<8;t++)a+=h[i+t]*Math.pow(2,7-t)}else a=4==d?64*h[i]+16*h[i+1]+4*h[i+2]+h[i+3]:16*h[i]+h[i+1];r+=o+("0"+a.toString(16)).slice(-2),i<h.length-d&&(r+=n)}}return"xci"!=t&&(r+=this.create_assembly_pallet(s,e)),r}create_assembly_pallet(t,i){let e="";e+="\n\nSpriteColourPallet"+t;for(let t=0;t<this.config.colour_depth;t++){const s=this.savedata.palette[t].substring(1,2);e+="\n"+i+"byte ",e+="$"+this.savedata.palette[t].substring(3,4)+this.savedata.palette[t].substring(5,6)+", $0"+s}return e}create_basic(){let t=10;const i=10;let e="";const s=Math.min(8,this.savedata.sprites.length);e+=t+" print chr$(147)",t+=i,e+="\n"+t+' print "generated with spritemate"',t+=i,e+="\n"+t+' print "'+s+" of "+this.savedata.sprites.length+' sprites displayed."',t+=i,e+="\n"+t+" poke 53285,"+this.savedata.colors[2]+": rem multicolor 1",t+=i,e+="\n"+t+" poke 53286,"+this.savedata.colors[3]+": rem multicolor 2",t+=i,e+="\n"+t+" poke 53269,255 : rem set all 8 sprites visible",t+=i,e+="\n"+t+" for x=12800 to 12800+"+(64*this.savedata.sprites.length-1)+": read y: poke x,y: next x: rem sprite generation",t+=i;let o=0,n=0,l=0;for(let r=0;r<s;r++){e+="\n"+t+" :: rem "+this.savedata.sprites[r].name,t+=i,e+="\n"+t+" poke "+(53287+r)+","+this.savedata.sprites[r].color+": rem color = "+this.savedata.sprites[r].color,t+=i,e+="\n"+t+" poke "+(2040+r)+","+(200+r)+": rem pointer",t+=i;let s=48*r+24+20,a=120;r>=4&&(s-=192,a+=52),e+="\n"+t+" poke "+(53248+2*r)+", "+s+": rem x pos",t+=i,e+="\n"+t+" poke "+(53249+2*r)+", "+a+": rem y pos",t+=i,this.savedata.sprites[r].multicolor&&(o|=1<<r),this.savedata.sprites[r].double_x&&(n|=1<<r),this.savedata.sprites[r].double_y&&(l|=1<<r)}e+="\n"+t+" poke 53276, "+o+": rem multicolor",t+=i,e+="\n"+t+" poke 53277, "+n+": rem width",t+=i,e+="\n"+t+" poke 53271, "+l+": rem height",t+=i;let r="",a="";t=1e3;for(let s=0;s<this.savedata.sprites.length;s++){const o=[].concat.apply([],this.savedata.sprites[s].pixels),n=this.savedata.sprites[s].multicolor;let l=1;n&&(l=2),e+="\n"+t+" :: rem "+this.savedata.sprites[s].name,t+=i,e+=n?" / multicolor":" / singlecolor",e+=" / color: "+this.savedata.sprites[s].color;for(let s=0;s<o.length;s+=8){s%128==0&&(e+="\n"+t+" data ",t+=i);for(let t=0;t<8;t+=l){const i=o[s+t];n&&(0==i&&(a="00"),1==i&&(a="10"),2==i&&(a="01"),3==i&&(a="11")),n||(a="1",0==i&&(a="0")),r+=a}e+=parseInt(r,2).toString(10)+",",r=""}let c="0000";n&&(c="1000");const h=("000"+(this.savedata.sprites[s].color>>>0).toString(2)).slice(-4);e+=parseInt(c+h,2).toString(10)}return e+="\n",e=e.replace(/,\n/g,"\n"),e}set_save_data(t,i){this.savedata=t,this.savedata.palette=i,this.savedata.sprite_x=this.config.sprite_x,this.savedata.sprite_y=this.config.sprite_y}close_window(){e()("#window-"+this.window).dialog("close"),this.eventhandler.onLoad()}}class p{constructor(t,i,o){this.window=t,this.config=i,this.eventhandler=o,this.config=i,this.window=t,this.eventhandler=o,s.append("#window-"+this.window,'\n    <div id="modal">\n        <h2 autofocus>Your settings will be saved locally to your browser storage</h2>\n        <fieldset>\n            <legend>Color palette</legend>\n            \n            <select id="colorpalette">\n              <option>default</option>\n              <option>greyscale</option>\n              <option>commodore</option>\n              <option>custom</option>\n            </select>\n\n            <br/>\n            <br/>\n\n            <div class="settings_colorfield">\n                <div class="settings_color" id="col-0"></div>\n                <input type="text" class="settings_colorvalue" id="colval-0" name="" value="">\n            </div>\n            <div class="settings_colorfield">\n                <div class="settings_color" id="col-1"></div>\n                <input type="text" class="settings_colorvalue" id="colval-1" name="" value="">\n            </div>\n            <div class="settings_colorfield">\n                <div class="settings_color" id="col-2"></div>\n                <input type="text" class="settings_colorvalue" id="colval-2" name="" value="">\n            </div>\n            <div class="settings_colorfield">\n                <div class="settings_color" id="col-3"></div>\n                <input type="text" class="settings_colorvalue" id="colval-3" name="" value="">\n            </div>\n            <div class="settings_colorfield">\n                <div class="settings_color" id="col-4"></div>\n                <input type="text" class="settings_colorvalue" id="colval-4" name="" value="">\n            </div>\n            <div class="settings_colorfield">\n                <div class="settings_color" id="col-5"></div>\n                <input type="text" class="settings_colorvalue" id="colval-5" name="" value="">\n            </div>\n            <div class="settings_colorfield">\n                <div class="settings_color" id="col-6"></div>\n                <input type="text" class="settings_colorvalue" id="colval-6" name="" value="">\n            </div>\n            <div class="settings_colorfield">\n                <div class="settings_color" id="col-7"></div>\n                <input type="text" class="settings_colorvalue" id="colval-7" name="" value="">\n            </div>\n\n            <div class="settings_colorfield">\n                <div class="settings_color" id="col-8"></div>\n                <input type="text" class="settings_colorvalue" id="colval-8" name="" value="">\n            </div>\n            <div class="settings_colorfield">\n                <div class="settings_color" id="col-9"></div>\n                <input type="text" class="settings_colorvalue" id="colval-9" name="" value="">\n            </div>\n            <div class="settings_colorfield">\n                <div class="settings_color" id="col-10"></div>\n                <input type="text" class="settings_colorvalue" id="colval-10" name="" value="">\n            </div>\n            <div class="settings_colorfield">\n                <div class="settings_color" id="col-11"></div>\n                <input type="text" class="settings_colorvalue" id="colval-11" name="" value="">\n            </div>\n            <div class="settings_colorfield">\n                <div class="settings_color" id="col-12"></div>\n                <input type="text" class="settings_colorvalue" id="colval-12" name="" value="">\n            </div>\n            <div class="settings_colorfield">\n                <div class="settings_color" id="col-13"></div>\n                <input type="text" class="settings_colorvalue" id="colval-13" name="" value="">\n            </div>\n            <div class="settings_colorfield">\n                <div class="settings_color" id="col-14"></div>\n                <input type="text" class="settings_colorvalue" id="colval-14" name="" value="">\n            </div>\n            <div class="settings_colorfield">\n                <div class="settings_color" id="col-15"></div>\n                <input type="text" class="settings_colorvalue" id="colval-15" name="" value="">\n            </div>\n\n        </fieldset>\n\n        \x3c!--\n        <fieldset>\n            <legend>Window settings</legend>\n            <div class="fieldset right">\n                <button id="button-save">Save now</button>\n                <button id="button-reset">Reset to defaults</button>\n            </div>\n            <p>Saves the window layout and zoom levels</p>\n        </fieldset>\n        --\x3e\n        <div id="button-row">\n          <button id="button-apply">Apply</button>\n        </div>\n\n    </div>\n    '),this.config.colors=this.config.palettes[this.config.selected_palette],s.val("#colorpalette",this.config.selected_palette),this.init_inputfields(this.config.colors),this.selection_change(),this.update_colors(),e()("#window-"+this.window).dialog({show:"fade",hide:"fade"}),s.sel("#button-apply").onclick=t=>this.close_window()}update_colors(){for(let t=0;t<this.config.colors.length;t++)s.val("#colval-"+t,"#"+this.config.colors[t].substring(1,2)+this.config.colors[t].substring(3,4)+this.config.colors[t].substring(5,6)),s.css("#col-"+t,"backgroundColor",this.config.colors[t])}init_inputfields(t){const i=this;for(let e=0;e<t.length;e++)s.sel("#colval-"+e).onchange=function(){i.update_custom_colors(e)};"custom"!=this.config.selected_palette?(s.disabled(".settings_colorvalue",!0),s.fade(".settings_colorvalue",1,.33)):(s.disabled(".settings_colorvalue",!1),s.fade(".settings_colorvalue",.33,1))}selection_change(){const t=this;s.sel("#colorpalette").onchange=function(){const i=s.val("#colorpalette");t.config.colors=t.config.palettes[i],t.config.selected_palette=i,"custom"!=i?(s.disabled(".settings_colorvalue",!0),s.fade(".settings_colorvalue",1,.33)):(s.disabled(".settings_colorvalue",!1),s.fade(".settings_colorvalue",.33,1)),t.update_colors()}}update_custom_colors(t){let i=s.val("#colval-"+t);i="#"+("000"+i.replace(/#/g,"")).slice(-3),i="#"+i.substring(1,2)+i.substring(1,2)+i.substring(2,3)+i.substring(2,3)+i.substring(3,4)+i.substring(3,4),this.config.palettes.custom[t]=i,this.config.colors=this.config.palettes.custom,this.update_colors()}close_window(){e()("#window-"+this.window).dialog("close"),this.eventhandler.onLoad()}get_config(){return this.config}}class _ extends l{constructor(t,i){super(),this.window=t,this.config=i,this.config=i,this.grid=this.config.window_editor.grid,this.window=t,this.canvas_element=document.createElement("canvas"),this.zoom=this.config.window_editor.zoom,this.zoom_min=10,this.zoom_max=26,this.pixels_x=this.config.sprite_x,this.pixels_y=this.config.sprite_y,this.width=this.pixels_x*this.zoom,this.height=this.pixels_y*this.zoom,this.canvas_element.id="editor",this.canvas_element.width=this.width,this.canvas_element.height=this.height,s.append("#window-"+this.window,'\n      <div class="window_menu">\n        <div class="icons-zoom-area">\n          <img src="img/ui/icon-zoom-plus.png" class="icon-hover" id="icon-editor-zoom-in" title="zoom in">\n          <img src="img/ui/icon-zoom-minus.png" class="icon-hover" id="icon-editor-zoom-out" title="zoom out">\n          <img src="img/ui/icon-grid.png" class="icon-hover" id="icon-editor-grid" title="toggle grid">\n        </div>\n\n        \x3c!--\n        <img src="img/ui/icon-multicolor.png" title="toggle single- & multicolor (c)" class=" icon-hover" id="icon-multicolor">\n        --\x3e\n        <img src="img/ui/icon-shift-left.png" title="shift left" class="icon-hover" id="icon-shift-left">\n        <img src="img/ui/icon-shift-right.png" title="shift right" class="icon-hover" id="icon-shift-right">\n        <img src="img/ui/icon-shift-up.png" title="shift up" class="icon-hover" id="icon-shift-up">\n        <img src="img/ui/icon-shift-down.png" title="shift down" class="icon-hover" id="icon-shift-down">\n        <img src="img/ui/icon-flip-horizontal.png" title="flip horizontal" class="icon-hover" id="icon-flip-horizontal">\n        <img src="img/ui/icon-flip-vertical.png" title="flip vertical" class="icon-hover" id="icon-flip-vertical">\n        <input type="text" class="editor_sprite_name" class="icon-hover" id="input-sprite-name" name="" value="" title="rename sprite">\n      </div>\n      <div id="editor-canvas"></div>\n      \n    '),s.append_element("#editor-canvas",this.canvas_element),this.canvas=this.canvas_element.getContext("2d",{alpha:!1})}update(t){this.canvas_element.width=this.width,this.canvas_element.height=this.height;const i=t.sprites[t.current_sprite];s.val("#input-sprite-name",i.name),this.canvas.fillStyle=this.config.colors[t.colors[0]],this.canvas.fillRect(0,0,this.width,this.height),t.current_sprite>0&&t.sprites[t.current_sprite-1].overlay&&this.display_overlay(t,"previous"),this.fill_canvas(t,i,1,1),i.overlay&&t.current_sprite<t.sprites.length-1&&this.display_overlay(t),this.grid&&this.display_grid(i)}display_overlay(t,i="",e=.4){let s=1;"previous"==i&&(s=-1);const o=t.sprites[t.current_sprite+s];this.fill_canvas(t,o,1,e)}fill_canvas(t,i,e,s=1){for(let o=0;o<this.pixels_x;o+=e)for(let n=0;n<this.pixels_y;n++){const l=i.pixels[n][o];if(0!=l){let i=t.colors[l];this.canvas.fillStyle=this.overlay_color(this.config.colors[i],s),this.canvas.fillRect(o*this.zoom,n*this.zoom,e*this.zoom,this.zoom)}}}overlay_color(t,i){const e=parseInt(t.slice(-6),16);return"rgba("+(e>>16&255)+","+(e>>8&255)+","+(255&e)+","+i+")"}display_grid(t){this.canvas.setLineDash([1,1]);for(let t=0;t<=this.pixels_x;t+=1)this.canvas.strokeStyle="#666666",t==this.pixels_x/2&&(this.canvas.strokeStyle="#888888"),this.canvas.beginPath(),this.canvas.moveTo(t*this.zoom,0),this.canvas.lineTo(t*this.zoom,this.height),this.canvas.stroke();for(let t=0;t<=this.pixels_y;t++)this.canvas.strokeStyle="#666666",t%(this.pixels_y/3)==0&&(this.canvas.strokeStyle="#888888"),this.canvas.beginPath(),this.canvas.moveTo(0,t*this.zoom),this.canvas.lineTo(this.width,t*this.zoom),this.canvas.stroke()}get_pixel(t){const i=this.canvas_element.getBoundingClientRect(),e=t.clientX-i.left,s=t.clientY-i.top;return{x:Math.floor(e/(this.width/this.config.sprite_x)),y:Math.floor(s/(this.height/this.config.sprite_y))}}toggle_grid(){this.grid=!this.grid}get_grid(){return this.grid}resize_editor(t,i){this.pixels_x=t,this.pixels_y=i,this.width=this.pixels_x*this.zoom,this.height=this.pixels_y*this.zoom,this.canvas_element.width=this.width,this.canvas_element.height=this.height}}class u{constructor(t,i){this.window=t,this.config=i,this.colors={},this.colors=i.colors,this.active_color=3,this.colour_depth=this.config.colour_depth,this.window=t,s.append("#window-"+this.window,'\n      <div id="palette_all_colors"></div>\n      <div id="palette_spritecolors">\n          <div id="palette_0">\n              <p>Transparent</p>\n              <div class="palette_color_item_active_colors" id="color_0" title="transparent&nbsp;(1)"></div>\n          </div>\n          <div id="palette_1">\n              <p>Individual</p>\n              <div class="palette_color_item_active_colors" id="color_1" title="individual&nbsp;color&nbsp;(2)"></div>\n          </div>\n          \x3c!--\n          <div id="palette_2">\n              <p>Multicolor 1</p>\n              <div class="palette_color_item_active_colors" id="color_2" title="multicolor&nbsp;1&nbsp;(3)"></div>\n          </div>\n          <div id="palette_3">\n              <p>Multicolor 2</p>\n              <div class="palette_color_item_active_colors" id="color_3" title="multicolor&nbsp;2&nbsp;(4)"></div>\n          </div>\n          --\x3e\n      </div>'),this.draw_palette()}update(t){s.css("#color_0","background-color",this.colors[t.colors[0]]),s.css("#color_1","background-color",this.colors[t.pen]),s.remove_all_class("#palette_spritecolors div","palette_color_item_selected"),s.remove_all_class("#palette_spritecolors p","palette_highlight_text"),s.add_class("#color_"+t.pen,"palette_color_item_selected"),s.add_class("#palette_"+t.pen+" p","palette_highlight_text")}draw_palette(){s.empty("#palette_all_colors");let t=0,i="";for(let e=0;e<this.colour_depth;e++){let s='<div class="palette_color_item" id="palette_color_'+this.colors[e]+'" title="$'+e.toString(16)+"&nbsp;/&nbsp;"+this.colors[e]+'" style="background-color:'+this.colors[e]+';"></div>';t++,2==t&&(t=0,s+='<div style="clear:both;"></div>'),i+=s}s.html("#palette_all_colors",i)}set_active_color(t){const i=t.target.id.replace("palette_color_","");this.active_color=this.colors.indexOf(i)}get_color(){return this.active_color}set_colors(t,i){this.colors=t,this.colour_depth=i,this.draw_palette()}}class g extends l{constructor(t,i){super(),this.window=t,this.config=i,this.canvas_element={},this.canvas={},this.config=i,this.window=t,this.canvas_element=document.createElement("canvas"),this.zoom=this.config.window_preview.zoom,this.zoom_min=4,this.zoom_max=16,this.pixels_x=this.config.sprite_x,this.pixels_y=this.config.sprite_y,this.width=this.pixels_x*this.zoom,this.height=this.pixels_y*this.zoom,this.canvas_element.id="preview",this.canvas_element.width=this.width,this.canvas_element.height=this.height,this.canvas=this.canvas_element.getContext("2d"),s.append("#window-"+this.window,'\n      <div class="window_menu">\n        <div class="icons-zoom-area">\n          <img src="img/ui/icon-zoom-plus.png" class="icon-hover" id="icon-preview-zoom-in" title="zoom in">\n          <img src="img/ui/icon-zoom-minus.png" class="icon-hover" id="icon-preview-zoom-out" title="zoom out">\n        </div>\n        \x3c!-- \n        <img src="img/ui/icon-preview-x2.png" class="icon-hover" id="icon-preview-x" title="double width">\n        <img src="img/ui/icon-preview-y2.png" class="icon-hover" id="icon-preview-y" title="double height">\n        --\x3e\n        <img src="img/ui/icon-preview-overlay.png" class="icon-hover" id="icon-preview-overlay" title="overlay next sprite">\n      </div>\n      <div id="preview-canvas"></div>\n    '),s.append_element("#preview-canvas",this.canvas_element)}update(t){this.canvas_element.width=this.width,this.canvas_element.height=this.height;const i=t.sprites[t.current_sprite];let e,o;this.canvas.fillStyle=this.config.colors[t.colors[0]],this.canvas.fillRect(0,0,this.width,this.height);for(let e=0;e<this.pixels_x;e+=1)for(let s=0;s<this.pixels_y;s++){const o=i.pixels[s][e];if(0!=o){let i=t.colors[o];this.canvas.fillStyle=this.config.colors[i],this.canvas.fillRect(e*this.zoom,s*this.zoom,1*this.zoom,this.zoom)}}i.overlay&&t.current_sprite<t.sprites.length-1&&this.display_overlay(t),i.double_x?(e=2,s.add_class("#icon-preview-x","icon-preview-x2-hi")):(e=1,s.remove_class("#icon-preview-x","icon-preview-x2-hi")),i.double_y?(o=2,s.add_class("#icon-preview-y","icon-preview-y2-hi")):(o=1,s.remove_class("#icon-preview-y","icon-preview-y2-hi")),s.css("#preview","width",this.width*e+"px"),s.css("#preview","height",this.height*o+"px")}display_overlay(t){const i=t.sprites[t.current_sprite+1];for(let e=0;e<this.pixels_x;e+=1)for(let s=0;s<this.pixels_y;s++){let o=i.pixels[s][e],n=t.colors[o];1!=o&&(n=t.colors[o]),0!=o&&(this.canvas.fillStyle=this.config.colors[n],this.canvas.fillRect(e*this.zoom,s*this.zoom,1*this.zoom,this.zoom))}}resize_editor(t,i){this.pixels_x=t,this.pixels_y=i,this.width=this.pixels_x*this.zoom,this.height=this.pixels_y*this.zoom,this.canvas_element.width=this.width,this.canvas_element.height=this.height}}class m{constructor(t){this.config=t,this.all={},this.backup=[],this.copy_sprite={},this.config=t,this.width=t.sprite_x,this.height=t.sprite_y,this.all={},this.all.version=this.config.version,this.all.colors={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,10:10,11:11,12:12,13:13,14:14,15:15,16:16},this.all.colour_depth=this.config.colour_depth,this.all.sprites=[],this.all.current_sprite=0,this.all.pen=1,this.all.type="sprite",this.backup=[],this.backup_position=-1,this.copy_sprite={},this.sprite_name_counter=0}new_sprite(){const t={name:this.all.type+"_"+this.sprite_name_counter,double_x:!1,double_y:!1,overlay:!1,pixels:[]};for(let i=0;i<this.height;i++){const i=[];for(let t=0;t<this.width;t++)i.push(0);t.pixels.push(i)}this.all.sprites.push(t),this.all.current_sprite=this.all.sprites.length-1,this.sprite_name_counter++,this.save_backup()}clear(){const t=[];for(let i=0;i<this.height;i++){const i=[];for(let t=0;t<this.width;t++)i.push(0);t.push(i)}this.all.sprites[this.all.current_sprite].pixels=t,this.save_backup()}fill(){const t=[];for(let i=0;i<this.height;i++){const i=[];for(let t=0;t<this.width;t++)i.push(this.all.pen);t.push(i)}this.all.sprites[this.all.current_sprite].pixels=t,this.save_backup()}flip_vertical(){this.all.sprites[this.all.current_sprite].pixels.reverse(),this.save_backup()}flip_horizontal(){const t=this.all.sprites[this.all.current_sprite];for(let i=0;i<this.height;i++)t.pixels[i].reverse();if(t.multicolor)for(let i=0;i<this.height;i++)t.pixels[i].push(t.pixels[i].shift());this.all.sprites[this.all.current_sprite]=t,this.save_backup()}shift_vertical(t){const i=this.all.sprites[this.all.current_sprite];"down"==t?i.pixels.unshift(i.pixels.pop()):i.pixels.push(i.pixels.shift()),this.all.sprites[this.all.current_sprite]=i,this.save_backup()}shift_horizontal(t){const i=this.all.sprites[this.all.current_sprite];for(let e=0;e<this.height;e++)"right"==t?i.multicolor?(i.pixels[e].unshift(i.pixels[e].pop()),i.pixels[e].unshift(i.pixels[e].pop())):i.pixels[e].unshift(i.pixels[e].pop()):i.multicolor?(i.pixels[e].push(i.pixels[e].shift()),i.pixels[e].push(i.pixels[e].shift())):i.pixels[e].push(i.pixels[e].shift());this.all.sprites[this.all.current_sprite]=i,this.save_backup()}get_colors(){return{0:this.all.colors[0],1:this.all.sprites[this.all.current_sprite].color,2:this.all.colors[2],3:this.all.colors[3]}}get_name(){return this.all.sprites[this.all.current_sprite].name}set_pixel(t,i){this.all.sprites[this.all.current_sprite].multicolor&&t.x%2!=0&&(t.x=t.x-1),this.all.sprites[this.all.current_sprite].pixels[t.y][t.x]=i?0:this.all.pen}get_current_sprite(){return this.all.sprites[this.all.current_sprite]}get_current_sprite_number(){return this.all.current_sprite}get_number_of_sprites(){return this.all.sprites.length}only_one_sprite(){return 1==this.all.sprites.length}get_pen(){return this.all.pen}set_pen(t){this.all.pen=t}set_pen_color(t){this.all.pen=t,this.save_backup()}get_all(){return this.all}set_all(t){this.all=t,this.save_backup()}sort_spritelist(t){const i=t.map((function(t){return parseInt(t)})),e=[];let s=0;for(let t=0;t<i.length;t++)e.push(this.all.sprites[i[t]]),i[t]==this.all.current_sprite&&(s=t);this.all.sprites=e,this.all.current_sprite=s,this.save_backup()}set_current_sprite(t){"right"==t&&(t=this.all.current_sprite+1),"left"==t&&(t=this.all.current_sprite-1),t<0&&(t=this.all.sprites.length-1),t>this.all.sprites.length-1&&(t=0),"number"==typeof t&&(this.all.current_sprite=t),this.save_backup()}delete(){this.all.sprites.length>1&&(this.all.sprites.splice(this.all.current_sprite,1),this.all.current_sprite==this.all.sprites.length&&this.all.current_sprite--,this.save_backup())}save_backup(){this.backup_position++,this.backup[this.backup_position]=JSON.parse(JSON.stringify(this.all))}undo(){this.backup_position>0&&(this.backup_position--,this.all=JSON.parse(JSON.stringify(this.backup[this.backup_position])))}redo(){this.backup_position<this.backup.length-1&&(this.backup_position++,this.all=JSON.parse(JSON.stringify(this.backup[this.backup_position])))}floodfill(t){let i=t.x;const e=t.y,s=this.all.sprites[this.all.current_sprite].pixels;let o=1;const n=this.all.sprites[this.all.current_sprite].multicolor;n&&(o=2),n&&i%2!=0&&(i-=1);const l=s[e][i];!function t(i,e,r){e>=0&&e<s.length&&i>=0&&i<s[e].length&&(n&&i%2!=0&&(i-=1),s[e][i]===l&&s[e][i]!=r&&(s[e][i]=r,t(i-o,e,r),t(i+o,e,r),t(i,e-1,r),t(i,e+1,r)))}(i,e,this.all.pen),this.all.sprites[this.all.current_sprite].pixels=s}is_copy_empty(){return 0===Object.keys(this.copy_sprite).length}copy(){this.copy_sprite=JSON.parse(JSON.stringify(this.all.sprites[this.all.current_sprite]))}paste(){this.all.sprites[this.all.current_sprite]=JSON.parse(JSON.stringify(this.copy_sprite)),this.save_backup()}duplicate(){this.copy(),this.new_sprite(),this.paste(),this.all.sprites[this.all.current_sprite].name=this.all.type+"_"+this.sprite_name_counter}can_undo(){return this.backup_position>0}can_redo(){return this.backup_position<this.backup.length-1}toggle_overlay(){this.all.sprites[this.all.current_sprite].overlay=!this.all.sprites[this.all.current_sprite].overlay}is_overlay(){return this.all.sprites[this.all.current_sprite].overlay}set_sprite_name(t){this.all.sprites[this.all.current_sprite].name=t}invert(){let t;t=1;for(let t=0;t<this.height;t++)for(let i=0;i<this.width;i+=1){const e=this.all.sprites[this.all.current_sprite].pixels[t][i];let s;0==e&&(s=1),1==e&&(s=0),2==e&&(s=3),3==e&&(s=2),this.all.sprites[this.all.current_sprite].pixels[t][i]=s}this.save_backup()}}class v{constructor(t){this.config=t,this.storage={},this.config=t,this.is_new_version=!1,this.init()}init(){void 0!==v&&(null==localStorage.getItem("spritemate_config")&&(console.log("creating local storage file..."),localStorage.setItem("spritemate_config",JSON.stringify(this.config)),this.is_new_version=!0),this.storage=JSON.parse(localStorage.getItem("spritemate_config")||"{}"),this.config.version>this.storage.version&&(this.storage=JSON.parse(JSON.stringify(this.config)),this.write(this.storage),this.is_new_version=!0,console.log("updating storage")),this.config=JSON.parse(JSON.stringify(this.storage)))}write(t){void 0!==v?localStorage.setItem("spritemate_config",JSON.stringify(t)):o("I can't write to local web storage.")}read(){if(void 0!==v)return JSON.parse(localStorage.getItem("spritemate_config")||"{}");o("I can't read from web storage."),this.storage=this.config}is_updated_version(){return this.is_new_version}get_config(){return this.config}}class f{constructor(t,i){this.config=t,this.callback=i,t.id="window-"+t.window_id,t.position={my:"left top",at:"left+"+t.left+" top+"+t.top},void 0===t.top&&(t.position=void 0),void 0===t.modal&&(t.modal=!1),void 0===t.escape&&(t.escape=!1);const o=`<div id="${t.id}" class="${t.type}" title="${t.title}"></div>`;s.append("#app",o),e()(this.get_window_id()).dialog({width:t.width,height:t.height,dialogClass:"no-close",modal:t.modal,closeOnEscape:t.escape,autoOpen:t.autoOpen,position:t.position,resizable:t.resizable,buttons:t.buttons}),i&&(e()(this.get_window_id()).dialog({dragStop:function(e,s){const o={name:t.name,data:{top:s.position.top,left:s.position.left}};i(o)}}),e()(this.get_window_id()).dialog({resizeStop:function(e,s){const o={name:t.name,data:{top:s.position.top,left:s.position.left,width:s.size.width,height:s.size.height}};i(o)}}))}get_window_id(){return"#"+this.config.id}}class w{constructor(t){this.config=t,this.storage={},this.sprite={},this.storage=new v(t),this.config=this.storage.get_config(),this.config.colors=this.config.palettes[this.config.selected_palette],this.sprite=new m(this.config);const i={name:"window_editor",title:"Editor",type:"sprite",resizable:!1,left:this.config.window_editor.left,top:this.config.window_editor.top,width:"auto",height:"auto",window_id:0};this.window_editor=new f(i,this.store_window.bind(this)),this.editor=new _(i.window_id,this.config);const s={name:"window_palette",title:"Colors",type:"colors",resizable:!1,left:this.config.window_palette.left,top:this.config.window_palette.top,width:"auto",height:"auto",window_id:1};this.window_palette=new f(s,this.store_window.bind(this)),this.palette=new u(s.window_id,this.config);const n={name:"window_preview",title:"Preview",type:"preview",resizable:!1,left:this.config.window_preview.left,top:this.config.window_preview.top,width:"auto",height:"auto",window_id:2};this.window_preview=new f(n,this.store_window.bind(this)),this.preview=new g(n.window_id,this.config);const l={name:"window_list",title:"Sprite List",type:"list",resizable:!0,left:this.config.window_list.left,top:this.config.window_list.top,width:this.config.window_list.width,height:this.config.window_list.height,window_id:3};this.window_list=new f(l,this.store_window.bind(this)),this.list=new r(l.window_id,this.config);const w={name:"window_about",title:"SpritemateX",type:"info",escape:!0,modal:!0,resizable:!1,autoOpen:!1,width:"680",height:"auto",window_id:4};this.window_about=new f(w),this.about=new a(w.window_id,this.config,{onLoad:this.regain_keyboard_controls.bind(this)});const y={name:"window_save",title:"Save",type:"file",escape:!0,modal:!0,resizable:!1,autoOpen:!1,width:"580",height:"auto",window_id:5};this.window_save=new f(y),this.save=new d(y.window_id,this.config,{onLoad:this.regain_keyboard_controls.bind(this)});const b={name:"window_settings,",title:"Settings",type:"settings",modal:!0,escape:!0,resizable:!1,autoOpen:!1,width:"760",height:"auto",window_id:6};this.window_settings=new f(b),this.settings=new p(b.window_id,this.config,{onLoad:this.update_config.bind(this)});const x={name:"window_tools",title:"Tools",type:"tools",resizable:!1,left:this.config.window_tools.left,top:this.config.window_tools.top,width:"auto",height:"auto",window_id:8};this.window_tools=new f(x,this.store_window.bind(this)),this.tools=new c(x.window_id,this.config),this.load=new h(this.config,{onLoad:this.update_loaded_file.bind(this)}),this.is_drawing=!1,this.oldpos={x:0,y:0},this.sprite.new_sprite(),this.mode="draw",this.allow_keyboard_shortcuts=!0,this.displayProjectInfo(),function(){const t=["Hold shift while clicking to delete pixels.","You can change and define your own colors in the settings.","Press 'z' for undo and 'shift + z' for redo.","You can position all windows how you like it best. SpritemateX remembers that for your next visit!","Sort your sprites by dragging them around with your mouse!","Right click on your sprite in the preview window to save it as PNG (works in Chrome at least)."];o("Tip Of The Day: "+t[Math.floor(Math.random()*t.length)],"tip")}(),this.list.update_all(this.sprite.get_all()),this.update(),this.user_interaction(),this.storage.is_updated_version()&&e()(this.window_about.get_window_id()).dialog("open")}displayProjectInfo(){const t="Sprite Size : "+this.config.sprite_x+" by "+this.config.sprite_y+", with colour depth of : "+this.config.colour_depth;s.html("#projectinfo",t)}update(){const t=this.sprite.get_all();this.editor.update(t),this.preview.update(t),this.list.update(t),this.palette.update(t),this.update_ui()}update_ui(){var t;this.sprite.get_number_of_sprites()>1?s.fade("#icon-list-delete",.33,1):s.fade("#icon-list-delete",1,.33),this.sprite.is_copy_empty()?s.fade("#icon-list-paste",1,.33):s.fade("#icon-list-paste",.33,1),this.sprite.can_undo()?s.fade("#icon-undo",.33,1):s.fade("#icon-undo",1,.33),this.sprite.can_redo()?s.fade("#icon-redo",.33,1):s.fade("#icon-redo",1,.33),this.sprite.is_overlay()?s.attr("#icon-preview-overlay","src","img/ui/icon-preview-overlay-hi.png"):s.attr("#icon-preview-overlay","src","img/ui/icon-preview-overlay.png"),this.preview.is_min_zoom()?s.fade("#icon-preview-zoom-out",1,.33):s.fade("#icon-preview-zoom-out",.33,1),this.preview.is_max_zoom()?s.fade("#icon-preview-zoom-in",1,.33):s.fade("#icon-preview-zoom-in",.33,1),this.editor.is_min_zoom()?s.fade("#icon-editor-zoom-out",1,.33):s.fade("#icon-editor-zoom-out",.33,1),this.editor.is_max_zoom()?s.fade("#icon-editor-zoom-in",1,.33):s.fade("#icon-editor-zoom-in",.33,1),this.list.is_min_zoom()?s.fade("#icon-list-zoom-out",1,.33):s.fade("#icon-list-zoom-out",.33,1),this.list.is_max_zoom()?s.fade("#icon-list-zoom-in",1,.33):s.fade("#icon-list-zoom-in",.33,1),s.remove_all_class(".sprite_in_list","sprite_in_list_selected"),null===(t=document.getElementById(this.sprite.get_current_sprite_number()))||void 0===t||t.classList.add("sprite_in_list_selected")}store_window(t){for(const i in t.data)this.config[t.name].hasOwnProperty(i)&&(this.config[t.name][i]=t.data[i]);this.storage.write(this.config)}update_config(){this.palette.set_colors(this.config.colors,this.config.colour_depth),this.storage.write(this.config),this.list.update_all(this.sprite.get_all()),this.update(),this.regain_keyboard_controls(),o("Configuration updated.")}update_loaded_file(){this.sprite.set_all(this.load.get_imported_file()),this.config.colors=this.load.get_imported_file().palette,this.config.colour_depth=this.load.get_imported_file().colour_depth,this.config.sprite_x=this.load.get_imported_file().sprite_x,this.config.sprite_y=this.load.get_imported_file().sprite_y,this.sprite.width=this.config.sprite_x,this.sprite.height=this.config.sprite_y,this.sprite.colour_depth=this.config.colour_depth,this.palette.set_colors(this.config.colors,this.config.colour_depth);for(let t=0;t<this.config.colors.length;t++)this.config.palettes.custom[t]=this.config.colors[t];this.settings.update_colors(),this.palette.draw_palette(),this.resizeAndUpdateDialogs(),this.update_config(),this.displayProjectInfo()}resizeAndUpdateDialogs(){this.editor.resize_editor(this.config.sprite_x,this.config.sprite_y),this.editor.update(this.sprite.get_all()),this.preview.resize_editor(this.config.sprite_x,this.config.sprite_y),this.preview.update(this.sprite.get_all()),this.list.resize_editor(this.config.sprite_x,this.config.sprite_y),this.list.update_all(this.sprite.get_all()),this.update()}regain_keyboard_controls(){this.allow_keyboard_shortcuts=!0}update_sprite_name(){this.allow_keyboard_shortcuts=!0;let t=s.val("#input-sprite-name");t=t.replace(/[^A-Za-z0-9-_]+/g,""),this.sprite.set_sprite_name(t),this.list.update_all(this.sprite.get_all()),this.update()}checkXWidth(){s.val("#XWidth")>=32?(s.sel("#colDepth").options[0].style.display="none",s.sel("#colDepth").options[1].style.display="none",s.val("#colDepth")<=4&&s.val("#colDepth",16)):(s.sel("#colDepth").options[0].style.display="block",s.sel("#colDepth").options[1].style.display="block")}checkColDepth(){s.sel("#menubar-invert").style.display="none",2!=s.val("#colDepth")&&4!=s.val("#colDepth")||(console.log("block"),s.sel("#menubar-invert").style.display="block")}user_interaction(){document.addEventListener("keydown",(t=>{if(this.allow_keyboard_shortcuts){if("a"==t.key){console.time("performance");for(let t=0;t<=1e3;t++)this.update();console.timeEnd("performance")}"ArrowRight"==t.key&&(this.sprite.set_current_sprite("right"),this.update()),"ArrowLeft"==t.key&&(this.sprite.set_current_sprite("left"),this.update()),"F"==t.key&&n(),"m"==t.key&&(this.mode="move",o("Move mode"),s.attr("#image-icon-move","src","img/ui/icon-move-hi.png"),s.attr("#image-icon-draw","src","img/ui/icon-draw.png"),s.attr("#image-icon-erase","src","img/ui/icon-erase.png"),s.attr("#image-icon-fill","src","img/ui/icon-fill.png")),"d"==t.key&&(this.mode="draw",o("Draw mode"),s.attr("#image-icon-move","src","img/ui/icon-move.png"),s.attr("#image-icon-draw","src","img/ui/icon-draw-hi.png"),s.attr("#image-icon-erase","src","img/ui/icon-erase.png"),s.attr("#image-icon-fill","src","img/ui/icon-fill.png")),"e"==t.key&&(this.mode="erase",o("Erase mode"),s.attr("#image-icon-move","src","img/ui/icon-move.png"),s.attr("#image-icon-draw","src","img/ui/icon-draw.png"),s.attr("#image-icon-erase","src","img/ui/icon-erase-hi.png"),s.attr("#image-icon-fill","src","img/ui/icon-fill.png")),"f"==t.key&&(this.mode="fill",o("Fill mode"),s.attr("#image-icon-move","src","img/ui/icon-move.png"),s.attr("#image-icon-draw","src","img/ui/icon-draw.png"),s.attr("#image-icon-erase","src","img/ui/icon-erase.png"),s.attr("#image-icon-fill","src","img/ui/icon-fill-hi.png")),"1"==t.key&&(this.sprite.set_pen(0),this.update()),"2"==t.key&&(this.sprite.set_pen(1),this.update()),"z"==t.key&&(this.sprite.undo(),this.update()),"Z"==t.key&&(this.sprite.redo(),this.update()),"N"==t.key&&(this.sprite.new_sprite(),this.list.update_all(this.sprite.get_all()),this.update(),o("New sprite.")),"C"==t.key&&(this.sprite.copy(),this.update_ui(),o("Sprite copied.")),"V"==t.key&&(this.sprite.is_copy_empty()?o("Nothing to copy.","error"):(this.sprite.paste(),this.update(),o("Sprite pasted."))),"D"==t.key&&(this.sprite.duplicate(),this.list.update_all(this.sprite.get_all()),this.update_ui(),o("Sprite duplicated.")),"X"==t.key&&(this.sprite.delete(),this.list.update_all(this.sprite.get_all()),this.update()),"i"==t.key&&(this.sprite.invert(),this.update())}})),s.sel("#menubar-info").onclick=()=>{this.allow_keyboard_shortcuts=!1,e()(this.window_about.get_window_id()).dialog("open")},s.sel("#menubar-settings").onclick=()=>{this.allow_keyboard_shortcuts=!1,e()(this.window_settings.get_window_id()).dialog("open")},s.sel("#menubar-load").onclick=()=>{s.sel("#input-load").click()},s.sel("#menubar-save").onclick=()=>{this.allow_keyboard_shortcuts=!1,e()(this.window_save.get_window_id()).dialog("open"),this.save.set_save_data(this.sprite.get_all(),this.config.colors)},s.sel("#menubar-new").onclick=()=>{s.val("#XWidth",this.config.sprite_x),s.val("#YHeight",this.config.sprite_y),s.val("#colDepth",this.config.colour_depth),s.css("#dialog-confirm","visibility","visible"),this.checkXWidth(),e()("#dialog-confirm").dialog("open")},s.sel("#XWidth").onchange=()=>{this.checkXWidth(),this.checkColDepth()},s.sel("#colDepth").onchange=()=>{this.checkColDepth()},e()("#dialog-confirm").dialog({resizable:!1,autoOpen:!1,height:"auto",width:400,modal:!0,dialogClass:"no-close",buttons:[{click:()=>{this.config.sprite_x=s.val("#XWidth"),this.config.sprite_y=s.val("#YHeight"),this.config.colour_depth=s.val("#colDepth"),this.sprite.width=this.config.sprite_x,this.sprite.height=this.config.sprite_y,this.palette.set_colors(this.config.colors,this.config.colour_depth),this.update_config(),this.sprite=new m(this.config),this.sprite.new_sprite(),this.resizeAndUpdateDialogs(),e()("#dialog-confirm").dialog("close"),this.displayProjectInfo(),o("New file created.")},text:"Ok",class:"confirm-button"},{click:()=>{e()("#dialog-confirm").dialog("close")},text:"Cancel",class:"confirm-button"}]}),s.sel("#menubar-undo").onclick=()=>{this.sprite.undo(),this.list.update_all(this.sprite.get_all()),this.update()},s.sel("#menubar-redo").onclick=()=>{this.sprite.redo(),this.list.update_all(this.sprite.get_all()),this.update()},s.sel("#menubar-new-sprite").onclick=()=>{this.sprite.new_sprite(),this.list.update_all(this.sprite.get_all()),this.update()},s.sel("#menubar-kill").onclick=()=>{this.sprite.delete(),this.list.update_all(this.sprite.get_all()),this.update()},s.sel("#menubar-copy").onclick=()=>{this.sprite.copy(),this.update_ui(),o("Sprite copied.")},s.sel("#menubar-paste").onclick=()=>{this.sprite.is_copy_empty()?o("Nothing to copy.","error"):(this.sprite.paste(),this.update(),o("Sprite pasted."))},s.sel("#menubar-duplicate").onclick=()=>{this.sprite.duplicate(),this.list.update_all(this.sprite.get_all()),this.update_ui(),o("Sprite duplicated.")},s.sel("#menubar-shift-left").onclick=()=>{this.sprite.shift_horizontal("left"),this.update()},s.sel("#menubar-shift-right").onclick=()=>{this.sprite.shift_horizontal("right"),this.update()},s.sel("#menubar-shift-up").onclick=()=>{this.sprite.shift_vertical("up"),this.update()},s.sel("#menubar-shift-down").onclick=()=>{this.sprite.shift_vertical("down"),this.update()},s.sel("#menubar-flip-horizontal").onclick=()=>{this.sprite.flip_horizontal(),this.update()},s.sel("#menubar-flip-vertical").onclick=()=>{this.sprite.flip_vertical(),this.update()},s.sel("#menubar-invert").onclick=()=>{this.sprite.invert(),this.update()},s.sel("#menubar-overlay").onclick=()=>{this.sprite.toggle_overlay(),this.update()},s.sel("#menubar-fullscreen").onclick=()=>{n()},s.sel("#menubar-editor-zoom-in").onclick=()=>{this.editor.zoom_in(),this.config.window_editor.zoom=this.editor.get_zoom(),this.storage.write(this.config),this.update()},s.sel("#menubar-editor-zoom-out").onclick=()=>{this.editor.zoom_out(),this.config.window_editor.zoom=this.editor.get_zoom(),this.storage.write(this.config),this.update()},s.sel("#menubar-editor-grid").onclick=()=>{this.editor.toggle_grid(),this.config.window_editor.grid=this.editor.get_grid(),this.storage.write(this.config),this.update()},s.sel("#menubar-preview-zoom-in").onclick=()=>{this.preview.zoom_in(),this.config.window_preview.zoom=this.preview.get_zoom(),this.storage.write(this.config),this.update()},s.sel("#menubar-preview-zoom-out").onclick=()=>{this.preview.zoom_out(),this.config.window_preview.zoom=this.preview.get_zoom(),this.storage.write(this.config),this.update()},s.sel("#menubar-list-grid").onclick=()=>{this.list.toggle_grid(),this.list.update_all(this.sprite.get_all()),this.update()},s.sel("#menubar-list-zoom-in").onclick=()=>{this.list.zoom_in(),this.config.window_list.zoom=this.list.get_zoom(),this.storage.write(this.config),this.list.update_all(this.sprite.get_all()),this.update()},s.sel("#menubar-list-zoom-out").onclick=()=>{this.list.zoom_out(),this.config.window_list.zoom=this.list.get_zoom(),this.storage.write(this.config),this.list.update_all(this.sprite.get_all()),this.update()},s.sel("#icon-preview-zoom-in").onclick=()=>{this.preview.zoom_in(),this.config.window_preview.zoom=this.preview.get_zoom(),this.storage.write(this.config),this.update()},s.sel("#icon-preview-zoom-out").onclick=()=>{this.preview.zoom_out(),this.config.window_preview.zoom=this.preview.get_zoom(),this.storage.write(this.config),this.update()},s.sel("#icon-preview-overlay").onclick=()=>{this.sprite.toggle_overlay(),this.update()},s.sel("#icon-load").onclick=()=>{s.sel("#input-load").click()},s.sel("#icon-save").onclick=()=>{this.allow_keyboard_shortcuts=!1,e()(this.window_save.get_window_id()).dialog("open"),this.save.set_save_data(this.sprite.get_all(),this.config.colors)},s.sel("#icon-undo").onclick=()=>{this.sprite.undo(),this.list.update_all(this.sprite.get_all()),this.update()},s.sel("#icon-redo").onclick=()=>{this.sprite.redo(),this.list.update_all(this.sprite.get_all()),this.update()},s.sel("#icon-move").onclick=()=>{this.mode="move",o("Move mode"),s.attr("#image-icon-move","src","img/ui/icon-move-hi.png"),s.attr("#image-icon-draw","src","img/ui/icon-draw.png"),s.attr("#image-icon-erase","src","img/ui/icon-erase.png"),s.attr("#image-icon-fill","src","img/ui/icon-fill.png")},s.sel("#icon-draw").onclick=()=>{this.mode="draw",o("Draw mode"),s.attr("#image-icon-move","src","img/ui/icon-move.png"),s.attr("#image-icon-draw","src","img/ui/icon-draw-hi.png"),s.attr("#image-icon-erase","src","img/ui/icon-erase.png"),s.attr("#image-icon-fill","src","img/ui/icon-fill.png")},s.sel("#icon-erase").onclick=()=>{this.mode="erase",o("Erase mode"),s.attr("#image-icon-move","src","img/ui/icon-move.png"),s.attr("#image-icon-draw","src","img/ui/icon-draw.png"),s.attr("#image-icon-erase","src","img/ui/icon-erase-hi.png"),s.attr("#image-icon-fill","src","img/ui/icon-fill.png")},s.sel("#icon-fill").onclick=()=>{this.mode="fill",o("Fill mode"),s.attr("#image-icon-move","src","img/ui/icon-move.png"),s.attr("#image-icon-draw","src","img/ui/icon-draw.png"),s.attr("#image-icon-erase","src","img/ui/icon-erase.png"),s.attr("#image-icon-fill","src","img/ui/icon-fill-hi.png")},s.sel("#palette_all_colors").onclick=t=>{this.palette.set_active_color(t),this.sprite.set_pen_color(this.palette.get_color()),this.list.update_all(this.sprite.get_all()),this.update()},s.sel("#palette_1").onclick=()=>{this.update()},s.sel("#palette_0").onclick=()=>{this.sprite.set_pen(0),this.update()},s.sel("#icon-editor-zoom-in").onclick=()=>{this.editor.zoom_in(),this.config.window_editor.zoom=this.editor.get_zoom(),this.storage.write(this.config),this.update()},s.sel("#icon-editor-zoom-out").onclick=()=>{this.editor.zoom_out(),this.config.window_editor.zoom=this.editor.get_zoom(),this.storage.write(this.config),this.update()},s.sel("#icon-editor-grid").onclick=()=>{this.editor.toggle_grid(),this.config.window_editor.grid=this.editor.get_grid(),this.storage.write(this.config),this.update()},s.sel("#icon-shift-left").onclick=()=>{this.sprite.shift_horizontal("left"),this.update()},s.sel("#icon-shift-right").onclick=()=>{this.sprite.shift_horizontal("right"),this.update()},s.sel("#icon-shift-up").onclick=()=>{this.sprite.shift_vertical("up"),this.update()},s.sel("#icon-shift-down").onclick=()=>{this.sprite.shift_vertical("down"),this.update()},s.sel("#icon-flip-horizontal").onclick=()=>{this.sprite.flip_horizontal(),this.update()},s.sel("#icon-flip-vertical").onclick=()=>{this.sprite.flip_vertical(),this.update()},s.sel("#input-sprite-name").onfocus=()=>{this.allow_keyboard_shortcuts=!1},s.sel("#input-sprite-name").onkeyup=t=>{"Enter"===t.key&&(this.update_sprite_name(),s.sel("#input-sprite-name").blur())},s.sel("#input-sprite-name").onblur=()=>{this.update_sprite_name()},s.sel("#editor").ontouchmove=t=>{t.preventDefault()},s.sel("#editor").onmousedown=t=>{"draw"==this.mode&&(this.sprite.set_pixel(this.editor.get_pixel(t),t.shiftKey),this.is_drawing=!0),"erase"==this.mode&&(this.sprite.set_pixel(this.editor.get_pixel(t),!0),this.is_drawing=!0),"fill"==this.mode&&this.sprite.floodfill(this.editor.get_pixel(t)),"move"==this.mode&&(this.move_start=!0,this.move_start_pos=this.editor.get_pixel(t)),this.update()},s.sel("#editor").onmousemove=t=>{if(this.is_drawing&&("draw"==this.mode||"erase"==this.mode)){const i=this.editor.get_pixel(t);if(i.x!=this.oldpos.x||i.y!=this.oldpos.y){const e=this.sprite.get_all();let s=t.shiftKey;"erase"==this.mode&&(s=!0),this.sprite.set_pixel(i,s),this.editor.update(e),this.preview.update(e),this.list.update(e),this.oldpos=i}}if(this.move_start){const i=this.editor.get_pixel(t).x-this.move_start_pos.x,e=this.editor.get_pixel(t).y-this.move_start_pos.y;i>0&&this.sprite.shift_horizontal("right"),i<0&&this.sprite.shift_horizontal("left"),e>0&&this.sprite.shift_vertical("down"),e<0&&this.sprite.shift_vertical("up"),(i||e)&&(this.move_start_pos=this.editor.get_pixel(t),this.update())}},s.sel("#editor").onclick=()=>{this.is_drawing=!1,this.move_start=!1,this.sprite.save_backup(),this.update()},s.sel("#icon-list-grid").onclick=()=>{this.list.toggle_grid(),this.list.update_all(this.sprite.get_all()),this.update()},s.sel("#icon-list-zoom-in").onclick=()=>{this.list.zoom_in(),this.config.window_list.zoom=this.list.get_zoom(),this.storage.write(this.config),this.list.update_all(this.sprite.get_all()),this.update()},s.sel("#icon-list-zoom-out").onclick=()=>{this.list.zoom_out(),this.config.window_list.zoom=this.list.get_zoom(),this.storage.write(this.config),this.list.update_all(this.sprite.get_all()),this.update()},s.sel("#icon-list-new").onclick=()=>{this.sprite.new_sprite(),this.list.update_all(this.sprite.get_all()),this.update()},s.sel("#icon-list-delete").onclick=()=>{this.sprite.delete(),this.list.update_all(this.sprite.get_all()),this.update()},s.sel("#icon-list-copy").onclick=()=>{this.sprite.copy(),this.update_ui(),o("Sprite copied.")},s.sel("#icon-list-paste").onclick=()=>{this.sprite.is_copy_empty()?o("Nothing to copy.","error"):(this.sprite.paste(),this.update(),o("Sprite pasted."))},s.sel("#icon-list-duplicate").onclick=()=>{this.sprite.duplicate(),this.list.update_all(this.sprite.get_all()),this.update_ui(),o("Sprite duplicated.")},s.sel("#spritelist").onclick=()=>{this.dragging||(this.sprite.set_current_sprite(this.list.get_clicked_sprite()),this.update())},e()("#spritelist").sortable({stop:()=>{this.sprite.sort_spritelist(e()("#spritelist").sortable("toArray")),this.dragging=!1,this.list.update_all(this.sprite.get_all()),this.update()}}),e()("#spritelist").sortable({start:()=>{this.dragging=!0}})}}document.addEventListener("DOMContentLoaded",(function(){new w({version:.32,sprite_x:32,sprite_y:32,colour_depth:16,palettes:{default:["#000000","#ffffff","#880000","#AAFFEE","#CC44CC","#00CC55","#0000AA","#EEEE77","#DD8855","#664400","#FF7777","#333333","#777777","#AAFF66","#0088FF","#BBBBBB"],greyscale:["#000000","#111111","#222222","#333333","#444444","#555555","#666666","#777777","#888888","#999999","#AAAAAA","#BBBBBB","#CCCCCC","#DDDDDD","#EEEEEE","#FFFFFF"],commodore:["#000000","#ffffff","#883333","#77cccc","#883399","#55aa44","#222299","#eeff77","#885522","#553300","#cc6677","#444444","#777777","#aaff99","#7766ee","#bbbbbb"],custom:["#000000","#ffffff","#880000","#AAFFEE","#CC44CC","#00CC55","#0000AA","#EEEE77","#DD8855","#664400","#FF7777","#333333","#777777","#AAFF66","#0088FF","#BBBBBB"]},selected_palette:"default",window_tools:{top:50,left:20},window_editor:{top:50,left:210,zoom:10,grid:!0},window_preview:{top:50,left:700,zoom:4},window_list:{top:280,left:700,width:440,height:270,zoom:3},window_palette:{top:50,left:110,zoom:1}})}))})();